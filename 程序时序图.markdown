# 程序时序图设计

以下时序图展示了使用 Playwright 实现网页内容抓取的线程执行流程，包括线程 A、B、C 的创建和交互逻辑，以及异常处理。

```mermaid
sequenceDiagram
    participant 主线程
    participant 线程A
    participant 线程B
    participant 线程C
    participant 守护线程
    participant 任务队列
    participant Browser

    %% 初始化
    主线程->>线程A: 创建线程A
    线程A->>Browser: 初始化Browser实例
    线程A->>任务队列: 写入登录任务
    线程A-->>主线程: 执行完毕

    %% 守护线程监控
    守护线程->>Browser: 持续监控
    Browser-->>守护线程: 正常运行

    %% 线程B抓取（异步非阻塞）
    主线程->>线程B: 启动（每5分钟抓取）
    loop 定时抓取
        线程B->>任务队列: 消费登录任务（通过同步队列）
        线程B->>Browser: 执行登录
        线程B->>Browser: 刷新指定URL
        Browser-->>线程B: 返回内容/异常
        alt 成功
            线程B->>内存缓冲: 暂存内容
            内存缓冲->>文件系统: 满10条时批量写入JSON
        else 失败
            线程B->>任务队列: 写入ERROR级日志（带优先级）
        end
    end

    %% 线程C日志处理（并行执行）
    主线程->>线程C: 启动（每10分钟处理）
    loop 定时处理
        线程C->>任务队列: 先取CRITICAL级日志
        线程C->>任务队列: 再取普通ERROR日志
        线程C->>文件系统: 批量处理日志
    end

    %% 异常处理（可恢复场景）
    Browser-->>守护线程: 抛出可恢复异常（如页面超时）
    守护线程->>Browser: 重启当前页面
    守护线程->>线程B: 通知恢复
    线程B->>Browser: 继续执行抓取

    %% 异常处理（不可恢复场景）
    Browser--x 守护线程: 抛出不可恢复异常
    守护线程->>主线程: 发送终止信号
    主线程->>线程A: 关闭Browser
    主线程->>线程B: 终止抓取
    主线程->>线程C: 终止处理
    主线程->>主线程: 等待3秒后重启线程链
```

## 说明
1. **线程 A**：负责创建单个浏览器实例并完成 www.hktlora.com 的登录逻辑。
2. **线程 B**：定时刷新指定网页，抓取内容并保存到本地 JSON 文件，同时记录错误信息到日志文件。
3. **线程 C**：定时处理线程 B 生成的错误日志。
4. **执行逻辑**：
   - 先创建线程 A，完成浏览器实例创建和登录。
   - 线程 A 执行完毕后，进入内部循环，线程 B 和线程 C 交替执行。
   - 线程 B 每次执行完毕后创建线程 C，线程 C 执行完毕后重新执行线程 B，如此循环。
5. **异常处理**：
   - 如果浏览器实例发生异常，线程 B 关闭浏览器实例及所有线程。
   - 跳出内部循环，重新执行外层循环，从线程 A 开始。
